{"ts":1380740688864,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1380740719284,"patch":[[{"diffs":[[1,"process.env['HUBOT_AUTH_ADMIN'] = 'mikeumus'\n"]],"start1":0,"start2":0,"length1":0,"length2":45}]],"length":45,"saved":false}
{"ts":1380740907294,"patch":[[{"diffs":[[0,"keumus'\n"],[1,"process.env['HUBOT_IRC_SERVER'] = irc.freenode.net\nprocess.env['HUBOT_IRC_ROOMS'] = '#pibo-irc'\nprocess.env['HUBOT_IRC_NICK'] = 'hubot'\nprocess.env['HUBOT_IRC_UNFLOOD'] = 'true'\n"]],"start1":37,"start2":37,"length1":8,"length2":186}]],"length":223,"saved":false}
{"ts":1380741095457,"patch":[[{"diffs":[[1,"# Description:\n#   Auth allows you to assign roles to users which can be used by other scripts\n#   to restrict access to Hubot commands\n#\n# Dependencies:\n#   None\n#\n# Configuration:\n#   HUBOT_AUTH_ADMIN - A comma separate list of user IDs\n#\n# Commands:\n#   hubot <user> has <role> role - Assigns a role to a user\n#   hubot <user> doesn't have <role> role - Removes a role from a user\n#   hubot what role does <user> have - Find out what roles are assigned to a specific user\n#   hubot who has admin role - Find out who's an admin and can assign roles\n#\n# Notes:\n#   * Call the method: robot.auth.hasRole(msg.envelope.user,'<role>')\n#   * returns bool true or false\n#\n#   * the 'admin' role can only be assigned through the environment variable\n#   * roles are all transformed to lower case\n#\n#   * The script assumes that user IDs will be unique on the service end as to\n#     correctly identify a user. Names were insecure as a user could impersonate\n#     a user\n#\n# Author:\n#   alexwilliamsca, tombell\n\n"],[0,"process.env['HUBOT_AUTH_"]],"start1":0,"start2":0,"length1":24,"length2":1030}]],"length":1229,"saved":false}
{"ts":1380741114330,"patch":[[{"diffs":[[-1,"# Description:\n#   Auth allows you to assign roles to users which can be used by other scripts\n#   to restrict access to Hubot commands\n#\n# Dependencies:\n#   None\n#\n# Configuration:\n#   HUBOT_AUTH_ADMIN - A comma separate list of user IDs\n#\n# Commands:\n#   hubot <user> has <role> role - Assigns a role to a user\n#   hubot <user> doesn't have <role> role - Removes a role from a user\n#   hubot what role does <user> have - Find out what roles are assigned to a specific user\n#   hubot who has admin role - Find out who's an admin and can assign roles\n#\n# Notes:\n#   * Call the method: robot.auth.hasRole(msg.envelope.user,'<role>')\n#   * returns bool true or false\n#\n#   * the 'admin' role can only be assigned through the environment variable\n#   * roles are all transformed to lower case\n#\n#   * The script assumes that user IDs will be unique on the service end as to\n#     correctly identify a user. Names were insecure as a user could impersonate\n#     a user\n#\n# Author:\n#   alexwilliamsca, tombell\n\nprocess.env['HUBOT_AUTH_ADMIN'] = 'mikeumus'\nprocess.env['HUBOT_IRC_SERVER'] = irc.freenode.net\nprocess.env['HUBOT_IRC_ROOMS'] = '#pibo-irc'\nprocess.env['HUBOT_IRC_NICK'] = 'hubot'\nprocess.env['HUBOT_IRC_UNFLOOD'] = 'true'\n"]],"start1":0,"start2":0,"length1":1229,"length2":0}]],"length":0,"saved":false}
{"ts":1380741120195,"patch":[[{"diffs":[[1,"# Description:\n#   Auth allows you to assign roles to users which can be used by other scripts\n#   to restrict access to Hubot commands\n#\n# Dependencies:\n#   None\n#\n# Configuration:\n#   HUBOT_AUTH_ADMIN - A comma separate list of user IDs\n#\n# Commands:\n#   hubot <user> has <role> role - Assigns a role to a user\n#   hubot <user> doesn't have <role> role - Removes a role from a user\n#   hubot what role does <user> have - Find out what roles are assigned to a specific user\n#   hubot who has admin role - Find out who's an admin and can assign roles\n#\n# Notes:\n#   * Call the method: robot.auth.hasRole(msg.envelope.user,'<role>')\n#   * returns bool true or false\n#\n#   * the 'admin' role can only be assigned through the environment variable\n#   * roles are all transformed to lower case\n#\n#   * The script assumes that user IDs will be unique on the service end as to\n#     correctly identify a user. Names were insecure as a user could impersonate\n#     a user\n#\n# Author:\n#   alexwilliamsca, tombell\n\nprocess.env['HUBOT_AUTH_ADMIN'] = 'mikeumus'\nprocess.env['HUBOT_IRC_SERVER'] = irc.freenode.net\nprocess.env['HUBOT_IRC_ROOMS'] = '#pibo-irc'\nprocess.env['HUBOT_IRC_NICK'] = 'hubot'\nprocess.env['HUBOT_IRC_UNFLOOD'] = 'true'\n"]],"start1":0,"start2":0,"length1":0,"length2":1229}]],"length":1229,"saved":false}
