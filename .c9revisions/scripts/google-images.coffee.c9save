{"ts":1380609324209,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"# Description:\n#   A way to interact with the Google Images API.\n#\n# Commands:\n#   hubot image me <query> - The Original. Queries Google Images for <query> and returns a random top result.\n#   hubot animate me <query> - The same thing as `image me`, except adds a few parameters to try to return an animated GIF instead.\n#   hubot mustache me <url> - Adds a mustache to the specified URL.\n#   hubot mustache me <query> - Searches Google Images for the specified query and mustaches it.\n\nmodule.exports = (robot) ->\n  robot.respond /(image|img)( me)? (.*)/i, (msg) ->\n    imageMe msg, msg.match[3], (url) ->\n      msg.send url\n\n  robot.respond /animate( me)? (.*)/i, (msg) ->\n    imageMe msg, msg.match[2], true, (url) ->\n      msg.send url\n\n  robot.respond /(?:mo?u)?sta(?:s|c)he?(?: me)? (.*)/i, (msg) ->\n    type = Math.floor(Math.random() * 3)\n    mustachify = \"http://mustachify.me/#{type}?src=\"\n    imagery = msg.match[1]\n\n    if imagery.match /^https?:\\/\\//i\n      msg.send \"#{mustachify}#{imagery}\"\n    else\n      imageMe msg, imagery, false, true, (url) ->\n        msg.send \"#{mustachify}#{url}\"\n\nimageMe = (msg, query, animated, faces, cb) ->\n  cb = animated if typeof animated == 'function'\n  cb = faces if typeof faces == 'function'\n  q = v: '1.0', rsz: '8', q: query, safe: 'active'\n  q.imgtype = 'animated' if typeof animated is 'boolean' and animated is true\n  q.imgtype = 'face' if typeof faces is 'boolean' and faces is true\n  msg.http('http://ajax.googleapis.com/ajax/services/search/images')\n    .query(q)\n    .get() (err, res, body) ->\n      images = JSON.parse(body)\n      images = images.responseData?.results\n      if images?.length > 0\n        image  = msg.random images\n        cb \"#{image.unescapedUrl}#.png\"\n\n"]],"start1":0,"start2":0,"length1":0,"length2":1735}]],"length":1735}
