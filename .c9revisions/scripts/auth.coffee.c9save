{"ts":1380599405968,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"# Description:\n#   Auth allows you to assign roles to users which can be used by other scripts\n#   to restrict access to Hubot commands\n#\n# Dependencies:\n#   None\n#\n# Configuration:\n#   HUBOT_AUTH_ADMIN - A comma separate list of user IDs\n#\n# Commands:\n#   hubot <user> has <role> role - Assigns a role to a user\n#   hubot <user> doesn't have <role> role - Removes a role from a user\n#   hubot what role does <user> have - Find out what roles are assigned to a specific user\n#   hubot who has admin role - Find out who's an admin and can assign roles\n#\n# Notes:\n#   * Call the method: robot.auth.hasRole(msg.envelope.user,'<role>')\n#   * returns bool true or false\n#\n#   * the 'admin' role can only be assigned through the environment variable\n#   * roles are all transformed to lower case\n#\n#   * The script assumes that user IDs will be unique on the service end as to\n#     correctly identify a user. Names were insecure as a user could impersonate\n#     a user\n#\n# Author:\n#   alexwilliamsca, tombell\n\nmodule.exports = (robot) ->\n\n  unless process.env.HUBOT_AUTH_ADMIN?\n    robot.logger.warning 'The HUBOT_AUTH_ADMIN environment variable not set'\n\n  if process.env.HUBOT_AUTH_ADMIN?\n    admins = process.env.HUBOT_AUTH_ADMIN.split ','\n  else\n    admins = []\n\n  class Auth\n    hasRole: (user, roles) ->\n      user = robot.brain.userForId(user.id)\n      if user? and user.roles?\n        roles = [roles] if typeof roles is 'string'\n        for role in roles\n          return true if role in user.roles\n      return false\n\n    usersWithRole: (role) ->\n      users = []\n      for own key, user of robot.brain.data.users\n        if robot.auth.hasRole(msg.envelope.user, role)\n          users.push(user)\n      users\n\n  robot.auth = new Auth\n\n  robot.respond /@?(.+) (has) ([\"'\\w: -_]+) (role)/i, (msg) ->\n    name    = msg.match[1].trim()\n    newRole = msg.match[3].trim().toLowerCase()\n\n    unless name.toLowerCase() in ['', 'who', 'what', 'where', 'when', 'why']\n      user = robot.brain.userForName(name)\n      return msg.reply \"#{name} does not exist\" unless user?\n      user.roles or= []\n\n      if newRole in user.roles\n        msg.reply \"#{name} already has the '#{newRole}' role.\"\n      else\n        if newRole is 'admin'\n          msg.reply \"Sorry, the 'admin' role can only be defined in the HUBOT_AUTH_ADMIN env variable.\"\n        else\n          myRoles = msg.message.user.roles or []\n          if msg.message.user.id.toString() in admins\n            user.roles.push(newRole)\n            msg.reply \"Ok, #{name} has the '#{newRole}' role.\"\n\n  robot.respond /@?(.+) (doesn't have|does not have) ([\"'\\w: -_]+) (role)/i, (msg) ->\n    name    = msg.match[1].trim()\n    newRole = msg.match[3].trim().toLowerCase()\n\n    unless name.toLowerCase() in ['', 'who', 'what', 'where', 'when', 'why']\n      user = robot.brain.userForName(name)\n      return msg.reply \"#{name} does not exist\" unless user?\n      user.roles or= []\n\n      if newRole is 'admin'\n        msg.reply \"Sorry, the 'admin' role can only be removed from the HUBOT_AUTH_ADMIN env variable.\"\n      else\n        myRoles = msg.message.user.roles or []\n        if msg.message.user.id.toString() in admins\n          user.roles = (role for role in user.roles when role isnt newRole)\n          msg.reply \"Ok, #{name} doesn't have the '#{newRole}' role.\"\n\n  robot.respond /(what role does|what roles does) @?(.+) (have)\\?*$/i, (msg) ->\n    name = msg.match[2].trim()\n    user = robot.brain.userForName(name)\n    return msg.reply \"#{name} does not exist\" unless user?\n    user.roles or= []\n\n    if user.id.toString() in admins\n      isAdmin = ' and is also an admin'\n    else\n      isAdmin = ''\n    msg.reply \"#{name} has the following roles: #{user.roles.join(', ')}#{isAdmin}.\"\n\n  robot.respond /who has admin role\\?*$/i, (msg) ->\n    adminNames = []\n    for admin in admins\n      user = robot.brain.userForId(admin)\n      adminNames.push user.name if user?\n\n    msg.reply \"The following people have the 'admin' role: #{adminNames.join(', ')}\"\n"]],"start1":0,"start2":0,"length1":0,"length2":4000}]],"length":4000}
{"contributors":[],"silentsave":false,"ts":1380599455627,"patch":[[{"diffs":[[0,"mins = ["],[1,"\"mikeumus\""],[0,"]\n\n  cla"]],"start1":1252,"start2":1252,"length1":16,"length2":26}]],"length":4010,"saved":false}
{"contributors":[],"silentsave":false,"ts":1380599917217,"patch":[[{"diffs":[[0,"ombell\n\n"],[1,"process.env['HUBOT_AUTH_ADMIN'] = 'mikeumus';\n\n"],[0,"module.e"]],"start1":998,"start2":998,"length1":16,"length2":63}]],"length":4057,"saved":false}
{"contributors":[],"silentsave":false,"ts":1380740686051,"patch":[[{"diffs":[[0,"mus'"],[-1,";"],[0,"\n\nmo"]],"start1":1046,"start2":1046,"length1":9,"length2":8}]],"length":4056,"saved":false}
{"ts":1380740724687,"patch":[[{"diffs":[[0,"ll\n\n"],[-1,"process.env['HUBOT_AUTH_ADMIN'] = 'mikeumus'\n\n"],[0,"modu"]],"start1":1002,"start2":1002,"length1":54,"length2":8}]],"length":4010,"saved":false}
{"ts":1380741137759,"patch":[[{"diffs":[[0,"ombell\n\n"],[1,"process.env['HUBOT_AUTH_ADMIN'] = 'mikeumus'\nprocess.env['HUBOT_IRC_SERVER'] = irc.freenode.net\nprocess.env['HUBOT_IRC_ROOMS'] = '#pibo-irc'\nprocess.env['HUBOT_IRC_NICK'] = 'hubot'\nprocess.env['HUBOT_IRC_UNFLOOD'] = 'true'\n\n"],[0,"module.e"]],"start1":998,"start2":998,"length1":16,"length2":240}]],"length":4234,"saved":false}
{"ts":1380742197998,"patch":[[{"diffs":[[0,"mus'"],[-1,"\nprocess.env['HUBOT_IRC_SERVER'] = irc.freenode.net\nprocess.env['HUBOT_IRC_ROOMS'] = '#pibo-irc'\nprocess.env['HUBOT_IRC_NICK'] = 'hubot'\nprocess.env['HUBOT_IRC_UNFLOOD'] = 'true'"],[0,"\n\nmo"]],"start1":1046,"start2":1046,"length1":186,"length2":8}]],"length":4056,"saved":false}
{"contributors":[],"silentsave":false,"ts":1380744578687,"patch":[[{"diffs":[[0,"ll\n\n"],[-1,"process.env['HUBOT_AUTH_ADMIN'] = 'mikeumus'\n\n"],[0,"modu"]],"start1":1002,"start2":1002,"length1":54,"length2":8}]],"length":4010,"saved":false}
{"ts":1380744613603,"patch":[[{"diffs":[[0,"ombell\n\n"],[1,"process.env['HUBOT_AUTH_ADMIN'] = 'mikeumus'\n\n"],[0,"module.e"]],"start1":998,"start2":998,"length1":16,"length2":62}]],"length":4056,"saved":false}
