{"ts":1380603117964,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"bind 127.12.36.1\\nport 16379\n"]],"start1":0,"start2":0,"length1":0,"length2":29}]],"length":29}
{"contributors":[],"silentsave":false,"ts":1380603222372,"patch":[[{"diffs":[[0,"ind "],[-1,"127.12.36.1"],[1,"process.env.IP"],[0,"\\npo"]],"start1":1,"start2":1,"length1":19,"length2":22}]],"length":32,"saved":false}
{"ts":1380603275245,"patch":[[{"diffs":[[0,"ind "],[-1,"process.env."],[1,"$"],[0,"IP\\n"]],"start1":1,"start2":1,"length1":20,"length2":9}]],"length":21,"saved":false}
{"ts":1380603327518,"patch":[[{"diffs":[[0,"ind "],[-1,"$"],[1,"process.env."],[0,"IP\\n"]],"start1":1,"start2":1,"length1":9,"length2":20}]],"length":32,"saved":false}
{"ts":1380603602871,"patch":[[{"diffs":[[-1,"bind process.env.IP\\nport 16379\n"],[1,"# Redis configuration file example\r\n\r\n# Note on units: when memory size is needed, it is possible to specify\r\n# it in the usual form of 1k 5GB 4M and so forth:\r\n#\r\n# 1k => 1000 bytes\r\n# 1kb => 1024 bytes\r\n# 1m => 1000000 bytes\r\n# 1mb => 1024*1024 bytes\r\n# 1g => 1000000000 bytes\r\n# 1gb => 1024*1024*1024 bytes\r\n#\r\n# units are case insensitive so 1GB 1Gb 1gB are all the same.\r\n\r\n# By default Redis does not run as a daemon. Use 'yes' if you need it.\r\n# Note that Redis will write a pid file in /var/run/redis.pid when daemonized.\r\ndaemonize no\r\n\r\n# When running daemonized, Redis writes a pid file in /var/run/redis.pid by\r\n# default. You can specify a custom pid file location here.\r\npidfile /var/run/redis.pid\r\n\r\n# Accept connections on the specified port, default is 6379.\r\n# If port 0 is specified Redis will not listen on a TCP socket.\r\nport 6379\r\n\r\n# If you want you can bind a single interface, if the bind option is not\r\n# specified all the interfaces will listen for incoming connections.\r\n#\r\n# bind 127.0.0.1\r\n\r\n# Specify the path for the unix socket that will be used to listen for\r\n# incoming connections. There is no default, so Redis will not listen\r\n# on a unix socket when not specified.\r\n#\r\n# unixsocket /tmp/redis.sock\r\n# unixsocketperm 755\r\n\r\n# Close the connection after a client is idle for N seconds (0 to disable)\r\ntimeout 0\r\n\r\n# TCP keepalive.\r\n#\r\n# If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence\r\n# of communication. This is useful for two reasons:\r\n#\r\n# 1) Detect dead peers.\r\n# 2) Take the connection alive from the point of view of network\r\n#    equipment in the middle.\r\n#\r\n# On Linux, the specified value (in seconds) is the period used to send ACKs.\r\n# Note that to close the connection the double of the time is needed.\r\n# On other kernels the period depends on the kernel configuration.\r\n#\r\n# A reasonable value for this option is 60 seconds.\r\ntcp-keepalive 0\r\n\r\n# Specify the server verbosity level.\r\n# This can be one of:\r\n# debug (a lot of information, useful for development/testing)\r\n# verbose (many rarely useful info, but not a mess like the debug level)\r\n# notice (moderately verbose, what you want in production probably)\r\n# warning (only very important / critical messages are logged)\r\nloglevel notice\r\n\r\n# Specify the log file name. Also 'stdout' can be used to force\r\n# Redis to log on the standard output. Note that if you use standard\r\n# output for logging but daemonize, logs will be sent to /dev/null\r\nlogfile stdout\r\n\r\n# To enable logging to the system logger, just set 'syslog-enabled' to yes,\r\n# and optionally update the other syslog parameters to suit your needs.\r\n# syslog-enabled no\r\n\r\n# Specify the syslog identity.\r\n# syslog-ident redis\r\n\r\n# Specify the syslog facility. Must be USER or between LOCAL0-LOCAL7.\r\n# syslog-facility local0\r\n\r\n# Set the number of databases. The default database is DB 0, you can select\r\n# a different one on a per-connection basis using SELECT <dbid> where\r\n# dbid is a number between 0 and 'databases'-1\r\ndatabases 16\r\n\r\n################################ SNAPSHOTTING  #################################\r\n#\r\n# Save the DB on disk:\r\n#\r\n#   save <seconds> <changes>\r\n#\r\n#   Will save the DB if both the given number of seconds and the given\r\n#   number of write operations against the DB occurred.\r\n#\r\n#   In the example below the behaviour will be to save:\r\n#   after 900 sec (15 min) if at least 1 key changed\r\n#   after 300 sec (5 min) if at least 10 keys changed\r\n#   after 60 sec if at least 10000 keys changed\r\n#\r\n#   Note: you can disable saving at all commenting all the \"save\" lines.\r\n#\r\n#   It is also possible to remove all the previously configured save\r\n#   points by adding a save directive with a single empty string argument\r\n#   like in the following example:\r\n#\r\n#   save \"\"\r\n\r\nsave 900 1\r\nsave 300 10\r\nsave 60 10000\r\n\r\n# By default Redis will stop accepting writes if RDB snapshots are enabled\r\n# (at least one save point) and the latest background save failed.\r\n# This will make the user aware (in an hard way) that data is not persisting\r\n# on disk properly, otherwise chances are that no one will notice and some\r\n# distater will happen.\r\n#\r\n# If the background saving process will start working again Redis will\r\n# automatically allow writes again.\r\n#\r\n# However if you have setup your proper monitoring of the Redis server\r\n# and persistence, you may want to disable this feature so that Redis will\r\n# continue to work as usually even if there are problems with disk,\r\n# permissions, and so forth.\r\nstop-writes-on-bgsave-error yes\r\n\r\n# Compress string objects using LZF when dump .rdb databases?\r\n# For default that's set to 'yes' as it's almost always a win.\r\n# If you want to save some CPU in the saving child set it to 'no' but\r\n# the dataset will likely be bigger if you have compressible values or keys.\r\nrdbcompression yes\r\n\r\n# Since version 5 of RDB a CRC64 checksum is placed at the end of the file.\r\n# This makes the format more resistant to corruption but there is a performance\r\n# hit to pay (around 10%) when saving and loading RDB files, so you can disable it\r\n# for maximum performances.\r\n#\r\n# RDB files created with checksum disabled have a checksum of zero that will\r\n# tell the loading code to skip the check.\r\nrdbchecksum yes\r\n\r\n# The filename where to dump the DB\r\ndbfilename dump.rdb\r\n\r\n# The working directory.\r\n#\r\n# The DB will be written inside this directory, with the filename specified\r\n# above using the 'dbfilename' configuration directive.\r\n# \r\n# The Append Only File will also be created inside this directory.\r\n# \r\n# Note that you must specify a directory here, not a file name.\r\ndir ./\r\n\r\n################################# REPLICATION #################################\r\n\r\n# Master-Slave replication. Use slaveof to make a Redis instance a copy of\r\n# another Redis server. Note that the configuration is local to the slave\r\n# so for example it is possible to configure the slave to save the DB with a\r\n# different interval, or to listen to another port, and so on.\r\n#\r\n# slaveof <masterip> <masterport>\r\n\r\n# If the master is password protected (using the \"requirepass\" configuration\r\n# directive below) it is possible to tell the slave to authenticate before\r\n# starting the replication synchronization process, otherwise the master will\r\n# refuse the slave request.\r\n#\r\n# masterauth <master-password>\r\n\r\n# When a slave loses its connection with the master, or when the replication\r\n# is still in progress, the slave can act in two different ways:\r\n#\r\n# 1) if slave-serve-stale-data is set to 'yes' (the default) the slave will\r\n#    still reply to client requests, possibly with out of date data, or the\r\n#    data set may just be empty if this is the first synchronization.\r\n#\r\n# 2) if slave-serve-stale-data is set to 'no' the slave will reply with\r\n#    an error \"SYNC with master in progress\" to all the kind of commands\r\n#    but to INFO and SLAVEOF.\r\n#\r\nslave-serve-stale-data yes\r\n\r\n# You can configure a slave instance to accept writes or not. Writing against\r\n# a slave instance may be useful to store some ephemeral data (because data\r\n# written on a slave will be easily deleted after resync with the master) but\r\n# may also cause problems if clients are writing to it because of a\r\n# misconfiguration.\r\n#\r\n# Since Redis 2.6 by default slaves are read-only.\r\n#\r\n# Note: read only slaves are not designed to be exposed to untrusted clients\r\n# on the internet. It's just a protection layer against misuse of the instance.\r\n# Still a read only slave exports by default all the administrative commands\r\n# such as CONFIG, DEBUG, and so forth. To a limited extend you can improve\r\n# security of read only slaves using 'rename-command' to shadow all the\r\n# administrative / dangerous commands.\r\nslave-read-only yes\r\n\r\n# Slaves send PINGs to server in a predefined interval. It's possible to change\r\n# this interval with the repl_ping_slave_period option. The default value is 10\r\n# seconds.\r\n#\r\n# repl-ping-slave-period 10\r\n\r\n# The following option sets a timeout for both Bulk transfer I/O timeout and\r\n# master data or ping response timeout. The default value is 60 seconds.\r\n#\r\n# It is important to make sure that this value is greater than the value\r\n# specified for repl-ping-slave-period otherwise a timeout will be detected\r\n# every time there is low traffic between the master and the slave.\r\n#\r\n# repl-timeout 60\r\n\r\n# Disable TCP_NODELAY on the slave socket after SYNC?\r\n#\r\n# If you select \"yes\" Redis will use a smaller number of TCP packets and\r\n# less bandwidth to send data to slaves. But this can add a delay for\r\n# the data to appear on the slave side, up to 40 milliseconds with\r\n# Linux kernels using a default configuration.\r\n#\r\n# If you select \"no\" the delay for data to appear on the slave side will\r\n# be reduced but more bandwidth will be used for replication.\r\n#\r\n# By default we optimize for low latency, but in very high traffic conditions\r\n# or when the master and slaves are many hops away, turning this to \"yes\" may\r\n# be a good idea.\r\nrepl-disable-tcp-nodelay no\r\n\r\n# The slave priority is an integer number published by Redis in the INFO output.\r\n# It is used by Redis Sentinel in order to select a slave to promote into a\r\n# master if the master is no longer working correctly.\r\n#\r\n# A slave with a low priority number is considered better for promotion, so\r\n# for instance if there are three slaves with priority 10, 100, 25 Sentinel will\r\n# pick the one wtih priority 10, that is the lowest.\r\n#\r\n# However a special priority of 0 marks the slave as not able to perform the\r\n# role of master, so a slave with priority of 0 will never be selected by\r\n# Redis Sentinel for promotion.\r\n#\r\n# By default the priority is 100.\r\nslave-priority 100\r\n\r\n################################## SECURITY ###################################\r\n\r\n# Require clients to issue AUTH <PASSWORD> before processing any other\r\n# commands.  This might be useful in environments in which you do not trust\r\n# others with access to the host running redis-server.\r\n#\r\n# This should stay commented out for backward compatibility and because most\r\n# people do not need auth (e.g. they run their own servers).\r\n# \r\n# Warning: since Redis is pretty fast an outside user can try up to\r\n# 150k passwords per second against a good box. This means that you should\r\n# use a very strong password otherwise it will be very easy to break.\r\n#\r\n# requirepass foobared\r\n\r\n# Command renaming.\r\n#\r\n# It is possible to change the name of dangerous commands in a shared\r\n# environment. For instance the CONFIG command may be renamed into something\r\n# hard to guess so that it will still be available for internal-use tools\r\n# but not available for general clients.\r\n#\r\n# Example:\r\n#\r\n# rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52\r\n#\r\n# It is also possible to completely kill a command by renaming it into\r\n# an empty string:\r\n#\r\n# rename-command CONFIG \"\"\r\n#\r\n# Please note that changing the name of commands that are logged into the\r\n# AOF file or transmitted to slaves may cause problems.\r\n\r\n################################### LIMITS ####################################\r\n\r\n# Set the max number of connected clients at the same time. By default\r\n# this limit is set to 10000 clients, however if the Redis server is not\r\n# able to configure the process file limit to allow for the specified limit\r\n# the max number of allowed clients is set to the current file limit\r\n# minus 32 (as Redis reserves a few file descriptors for internal uses).\r\n#\r\n# Once the limit is reached Redis will close all the new connections sending\r\n# an error 'max number of clients reached'.\r\n#\r\n# maxclients 10000\r\n\r\n# Don't use more memory than the specified amount of bytes.\r\n# When the memory limit is reached Redis will try to remove keys\r\n# accordingly to the eviction policy selected (see maxmemmory-policy).\r\n#\r\n# If Redis can't remove keys according to the policy, or if the policy is\r\n# set to 'noeviction', Redis will start to reply with errors to commands\r\n# that would use more memory, like SET, LPUSH, and so on, and will continue\r\n# to reply to read-only commands like GET.\r\n#\r\n# This option is usually useful when using Redis as an LRU cache, or to set\r\n# an hard memory limit for an instance (using the 'noeviction' policy).\r\n#\r\n# WARNING: If you have slaves attached to an instance with maxmemory on,\r\n# the size of the output buffers needed to feed the slaves are subtracted\r\n# from the used memory count, so that network problems / resyncs will\r\n# not trigger a loop where keys are evicted, and in turn the output\r\n# buffer of slaves is full with DELs of keys evicted triggering the deletion\r\n# of more keys, and so forth until the database is completely emptied.\r\n#\r\n# In short... if you have slaves attached it is suggested that you set a lower\r\n# limit for maxmemory so that there is some free RAM on the system for slave\r\n# output buffers (but this is not needed if the policy is 'noeviction').\r\n#\r\n# maxmemory <bytes>\r\n\r\n# MAXMEMORY POLICY: how Redis will select what to remove when maxmemory\r\n# is reached. You can select among five behaviors:\r\n# \r\n# volatile-lru -> remove the key with an expire set using an LRU algorithm\r\n# allkeys-lru -> remove any key accordingly to the LRU algorithm\r\n# volatile-random -> remove a random key with an expire set\r\n# allkeys-random -> remove a random key, any key\r\n# volatile-ttl -> remove the key with the nearest expire time (minor TTL)\r\n# noeviction -> don't expire at all, just return an error on write operations\r\n# \r\n# Note: with any of the above policies, Redis will return an error on write\r\n#       operations, when there are not suitable keys for eviction.\r\n#\r\n#       At the date of writing this commands are: set setnx setex append\r\n#       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd\r\n#       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby\r\n#       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby\r\n#       getset mset msetnx exec sort\r\n#\r\n# The default is:\r\n#\r\n# maxmemory-policy volatile-lru\r\n\r\n# LRU and minimal TTL algorithms are not precise algorithms but approximated\r\n# algorithms (in order to save memory), so you can select as well the sample\r\n# size to check. For instance for default Redis will check three keys and\r\n# pick the one that was used less recently, you can change the sample size\r\n# using the following configuration directive.\r\n#\r\n# maxmemory-samples 3\r\n\r\n############################## APPEND ONLY MODE ###############################\r\n\r\n# By default Redis asynchronously dumps the dataset on disk. This mode is\r\n# good enough in many applications, but an issue with the Redis process or\r\n# a power outage may result into a few minutes of writes lost (depending on\r\n# the configured save points).\r\n#\r\n# The Append Only File is an alternative persistence mode that provides\r\n# much better durability. For instance using the default data fsync policy\r\n# (see later in the config file) Redis can lose just one second of writes in a\r\n# dramatic event like a server power outage, or a single write if something\r\n# wrong with the Redis process itself happens, but the operating system is\r\n# still running correctly.\r\n#\r\n# AOF and RDB persistence can be enabled at the same time without problems.\r\n# If the AOF is enabled on startup Redis will load the AOF, that is the file\r\n# with the better durability guarantees.\r\n#\r\n# Please check http://redis.io/topics/persistence for more information.\r\n\r\nappendonly no\r\n\r\n# The name of the append only file (default: \"appendonly.aof\")\r\n# appendfilename appendonly.aof\r\n\r\n# The fsync() call tells the Operating System to actually write data on disk\r\n# instead to wait for more data in the output buffer. Some OS will really flush \r\n# data on disk, some other OS will just try to do it ASAP.\r\n#\r\n# Redis supports three different modes:\r\n#\r\n# no: don't fsync, just let the OS flush the data when it wants. Faster.\r\n# always: fsync after every write to the append only log . Slow, Safest.\r\n# everysec: fsync only one time every second. Compromise.\r\n#\r\n# The default is \"everysec\", as that's usually the right compromise between\r\n# speed and data safety. It's up to you to understand if you can relax this to\r\n# \"no\" that will let the operating system flush the output buffer when\r\n# it wants, for better performances (but if you can live with the idea of\r\n# some data loss consider the default persistence mode that's snapshotting),\r\n# or on the contrary, use \"always\" that's very slow but a bit safer than\r\n# everysec.\r\n#\r\n# More details please check the following article:\r\n# http://antirez.com/post/redis-persistence-demystified.html\r\n#\r\n# If unsure, use \"everysec\".\r\n\r\n# appendfsync always\r\nappendfsync everysec\r\n# appendfsync no\r\n\r\n# When the AOF fsync policy is set to always or everysec, and a background\r\n# saving process (a background save or AOF log background rewriting) is\r\n# performing a lot of I/O against the disk, in some Linux configurations\r\n# Redis may block too long on the fsync() call. Note that there is no fix for\r\n# this currently, as even performing fsync in a different thread will block\r\n# our synchronous write(2) call.\r\n#\r\n# In order to mitigate this problem it's possible to use the following option\r\n# that will prevent fsync() from being called in the main process while a\r\n# BGSAVE or BGREWRITEAOF is in progress.\r\n#\r\n# This means that while another child is saving, the durability of Redis is\r\n# the same as \"appendfsync none\". In practical terms, this means that it is\r\n# possible to lose up to 30 seconds of log in the worst scenario (with the\r\n# default Linux settings).\r\n# \r\n# If you have latency problems turn this to \"yes\". Otherwise leave it as\r\n# \"no\" that is the safest pick from the point of view of durability.\r\nno-appendfsync-on-rewrite no\r\n\r\n# Automatic rewrite of the append only file.\r\n# Redis is able to automatically rewrite the log file implicitly calling\r\n# BGREWRITEAOF when the AOF log size grows by the specified percentage.\r\n# \r\n# This is how it works: Redis remembers the size of the AOF file after the\r\n# latest rewrite (if no rewrite has happened since the restart, the size of\r\n# the AOF at startup is used).\r\n#\r\n# This base size is compared to the current size. If the current size is\r\n# bigger than the specified percentage, the rewrite is triggered. Also\r\n# you need to specify a minimal size for the AOF file to be rewritten, this\r\n# is useful to avoid rewriting the AOF file even if the percentage increase\r\n# is reached but it is still pretty small.\r\n#\r\n# Specify a percentage of zero in order to disable the automatic AOF\r\n# rewrite feature.\r\n\r\nauto-aof-rewrite-percentage 100\r\nauto-aof-rewrite-min-size 64mb\r\n\r\n################################ LUA SCRIPTING  ###############################\r\n\r\n# Max execution time of a Lua script in milliseconds.\r\n#\r\n# If the maximum execution time is reached Redis will log that a script is\r\n# still in execution after the maximum allowed time and will start to\r\n# reply to queries with an error.\r\n#\r\n# When a long running script exceed the maximum execution time only the\r\n# SCRIPT KILL and SHUTDOWN NOSAVE commands are available. The first can be\r\n# used to stop a script that did not yet called write commands. The second\r\n# is the only way to shut down the server in the case a write commands was\r\n# already issue by the script but the user don't want to wait for the natural\r\n# termination of the script.\r\n#\r\n# Set it to 0 or a negative value for unlimited execution without warnings.\r\nlua-time-limit 5000\r\n\r\n################################## SLOW LOG ###################################\r\n\r\n# The Redis Slow Log is a system to log queries that exceeded a specified\r\n# execution time. The execution time does not include the I/O operations\r\n# like talking with the client, sending the reply and so forth,\r\n# but just the time needed to actually execute the command (this is the only\r\n# stage of command execution where the thread is blocked and can not serve\r\n# other requests in the meantime).\r\n# \r\n# You can configure the slow log with two parameters: one tells Redis\r\n# what is the execution time, in microseconds, to exceed in order for the\r\n# command to get logged, and the other parameter is the length of the\r\n# slow log. When a new command is logged the oldest one is removed from the\r\n# queue of logged commands.\r\n\r\n# The following time is expressed in microseconds, so 1000000 is equivalent\r\n# to one second. Note that a negative number disables the slow log, while\r\n# a value of zero forces the logging of every command.\r\nslowlog-log-slower-than 10000\r\n\r\n# There is no limit to this length. Just be aware that it will consume memory.\r\n# You can reclaim memory used by the slow log with SLOWLOG RESET.\r\nslowlog-max-len 128\r\n\r\n############################### ADVANCED CONFIG ###############################\r\n\r\n# Hashes are encoded using a memory efficient data structure when they have a\r\n# small number of entries, and the biggest entry does not exceed a given\r\n# threshold. These thresholds can be configured using the following directives.\r\nhash-max-ziplist-entries 512\r\nhash-max-ziplist-value 64\r\n\r\n# Similarly to hashes, small lists are also encoded in a special way in order\r\n# to save a lot of space. The special representation is only used when\r\n# you are under the following limits:\r\nlist-max-ziplist-entries 512\r\nlist-max-ziplist-value 64\r\n\r\n# Sets have a special encoding in just one case: when a set is composed\r\n# of just strings that happens to be integers in radix 10 in the range\r\n# of 64 bit signed integers.\r\n# The following configuration setting sets the limit in the size of the\r\n# set in order to use this special memory saving encoding.\r\nset-max-intset-entries 512\r\n\r\n# Similarly to hashes and lists, sorted sets are also specially encoded in\r\n# order to save a lot of space. This encoding is only used when the length and\r\n# elements of a sorted set are below the following limits:\r\nzset-max-ziplist-entries 128\r\nzset-max-ziplist-value 64\r\n\r\n# Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in\r\n# order to help rehashing the main Redis hash table (the one mapping top-level\r\n# keys to values). The hash table implementation Redis uses (see dict.c)\r\n# performs a lazy rehashing: the more operation you run into an hash table\r\n# that is rehashing, the more rehashing \"steps\" are performed, so if the\r\n# server is idle the rehashing is never complete and some more memory is used\r\n# by the hash table.\r\n# \r\n# The default is to use this millisecond 10 times every second in order to\r\n# active rehashing the main dictionaries, freeing memory when possible.\r\n#\r\n# If unsure:\r\n# use \"activerehashing no\" if you have hard latency requirements and it is\r\n# not a good thing in your environment that Redis can reply form time to time\r\n# to queries with 2 milliseconds delay.\r\n#\r\n# use \"activerehashing yes\" if you don't have such hard requirements but\r\n# want to free memory asap when possible.\r\nactiverehashing yes\r\n\r\n# The client output buffer limits can be used to force disconnection of clients\r\n# that are not reading data from the server fast enough for some reason (a\r\n# common reason is that a Pub/Sub client can't consume messages as fast as the\r\n# publisher can produce them).\r\n#\r\n# The limit can be set differently for the three different classes of clients:\r\n#\r\n# normal -> normal clients\r\n# slave  -> slave clients and MONITOR clients\r\n# pubsub -> clients subcribed to at least one pubsub channel or pattern\r\n#\r\n# The syntax of every client-output-buffer-limit directive is the following:\r\n#\r\n# client-output-buffer-limit <class> <hard limit> <soft limit> <soft seconds>\r\n#\r\n# A client is immediately disconnected once the hard limit is reached, or if\r\n# the soft limit is reached and remains reached for the specified number of\r\n# seconds (continuously).\r\n# So for instance if the hard limit is 32 megabytes and the soft limit is\r\n# 16 megabytes / 10 seconds, the client will get disconnected immediately\r\n# if the size of the output buffers reach 32 megabytes, but will also get\r\n# disconnected if the client reaches 16 megabytes and continuously overcomes\r\n# the limit for 10 seconds.\r\n#\r\n# By default normal clients are not limited because they don't receive data\r\n# without asking (in a push way), but just after a request, so only\r\n# asynchronous clients may create a scenario where data is requested faster\r\n# than it can read.\r\n#\r\n# Instead there is a default limit for pubsub and slave clients, since\r\n# subscribers and slaves receive data in a push fashion.\r\n#\r\n# Both the hard or the soft limit can be disabled by setting them to zero.\r\nclient-output-buffer-limit normal 0 0 0\r\nclient-output-buffer-limit slave 256mb 64mb 60\r\nclient-output-buffer-limit pubsub 32mb 8mb 60\r\n\r\n# Redis calls an internal function to perform many background tasks, like\r\n# closing connections of clients in timeot, purging expired keys that are\r\n# never requested, and so forth.\r\n#\r\n# Not all tasks are perforemd with the same frequency, but Redis checks for\r\n# tasks to perform accordingly to the specified \"hz\" value.\r\n#\r\n# By default \"hz\" is set to 10. Raising the value will use more CPU when\r\n# Redis is idle, but at the same time will make Redis more responsive when\r\n# there are many keys expiring at the same time, and timeouts may be\r\n# handled with more precision.\r\n#\r\n# The range is between 1 and 500, however a value over 100 is usually not\r\n# a good idea. Most users should use the default of 10 and raise this up to\r\n# 100 only in environments where very low latency is required.\r\nhz 10\r\n\r\n# When a child rewrites the AOF file, if the following option is enabled\r\n# the file will be fsync-ed every 32 MB of data generated. This is useful\r\n# in order to commit the file to the disk more incrementally and avoid\r\n# big latency spikes.\r\naof-rewrite-incremental-fsync yes\r\n\r\n################################## INCLUDES ###################################\r\n\r\n# Include one or more other config files here.  This is useful if you\r\n# have a standard template that goes to all Redis server but also need\r\n# to customize a few per-server settings.  Include files can include\r\n# other files, so use this wisely.\r\n#\r\n# include /path/to/local.conf\r\n# include /path/to/other.conf"]],"start1":0,"start2":0,"length1":32,"length2":26268}]],"length":26268,"saved":false}
{"ts":1380603650792,"patch":[[{"diffs":[[0,".\r\nport "],[1,"1"],[0,"6379\r\n\r\n"]],"start1":839,"start2":839,"length1":16,"length2":17},{"diffs":[[0,"\n#\r\n"],[-1,"# "],[0,"bind "],[-1,"127.0.0.1"],[1,"process.env.IP"],[0,"\r\n\r\n"]],"start1":999,"start2":999,"length1":24,"length2":27}]],"length":26272,"saved":false}
{"ts":1380603731608,"patch":[[{"diffs":[[0,"ind "],[-1,"process.env.IP"],[1,"127.12.36.1"],[0,"\r\n\r\n"]],"start1":1004,"start2":1004,"length1":22,"length2":19}]],"length":26269,"saved":false}
{"ts":1380603825751,"patch":[[{"diffs":[[0,"epalive "],[1,"6"],[0,"0\r\n\r\n# S"]],"start1":1906,"start2":1906,"length1":16,"length2":17}]],"length":26270,"saved":false}
{"ts":1380603941546,"patch":[[{"diffs":[[0,"conds.\r\n"],[1,"# "],[0,"tcp-keep"]],"start1":1892,"start2":1892,"length1":16,"length2":18}]],"length":26272,"saved":false}
{"ts":1380603962871,"patch":[[{"diffs":[[0," idea.\r\n"],[1,"# "],[0,"repl-dis"]],"start1":9026,"start2":9026,"length1":16,"length2":18}]],"length":26274,"saved":false}
{"ts":1380603999413,"patch":[[{"diffs":[[0,"uired.\r\n"],[1,"# "],[0,"hz 10\r\n\r"]],"start1":25581,"start2":25581,"length1":16,"length2":18}]],"length":26276,"saved":false}
{"ts":1380604011574,"patch":[[{"diffs":[[0,"pikes.\r\n"],[1,"#"],[0,"aof-rewr"]],"start1":25836,"start2":25836,"length1":16,"length2":17}]],"length":26277,"saved":false}
{"ts":1380604216907,"patch":[[{"diffs":[[0,"ind "],[-1,"127.12.36.1"],[1,"process.env.IP"],[0,"\r\n\r\n"]],"start1":1004,"start2":1004,"length1":19,"length2":22}]],"length":26280,"saved":false}
{"ts":1380604233454,"patch":[[{"diffs":[[0,"ind "],[-1,"process.env.IP"],[1,"127.12.36.1"],[0,"\r\n\r\n"]],"start1":1004,"start2":1004,"length1":22,"length2":19}]],"length":26277,"saved":false}
